/*!
* Sass-Type-Baseline-Grid-Utility
*
* Copyright (c) 2015 gskinner.com, inc.
*
* Permission is hereby granted, free of charge, to any person
* obtaining a copy of this software and associated documentation
* files (the "Software"), to deal in the Software without
* restriction, including without limitation the rights to use,
* copy, modify, merge, publish, distribute, sublicense, and/or sell
* copies of the Software, and to permit persons to whom the
* Software is furnished to do so, subject to the following
* conditions:
*
* The above copyright notice and this permission notice shall be
* included in all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES
* OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND
* NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
* HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
* FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
* OTHER DEALINGS IN THE SOFTWARE.
*/



//*******************************************
//
//	BASELINE UTILITY
//
//	- Automatically create a custom baseline grid
//	aligned with the visible baseline of each font
//
//	Contents
//	1) DECIMAL ROUNDING
//	2) BASELINE GRID
//	3) BASELINE FONT
//
//*******************************************



//*******************************************
//
//	DECIMAL ROUNDING
//
//*******************************************
@function decimalRound( $number, $decimals: 1 ) {
	$n: 1;
	@for $i from 1 through $decimals {
		$n: $n * 10;
	}
	@return round($number * $n) / $n;
}



//*******************************************
//
//	BASELINE GRID
//
//*******************************************
@function baselineGrid( $size: 1, $baseline: $baseline ) {
	@return decimalRound( $size * $baseline );
}



//*******************************************
//
//	BASELINE FONT
//
//*******************************************
@mixin baselineFont(
	$size:			$fontSize-base,		// A unitless value to determine the size ramp ratio increment used
	$shiftRatio: 	0.25,				// Custom for each font to determine it's baseline location
	$baseline: 		$baseline, 			// Should be specified as a global variable
	$ratio: 		$ratio				// Should be specified as a global variable
) {

	// Remove excess decimal places
	$b: decimalRound($baseline);

	// Calculate font size based on given ratio increment
	$r: $ratio;
	@if $size > 1 {
		@for $i from 2 through $size {
			$r: ($r * $ratio);
		}
	}
	@if $size < 1 {
		@for $i from 0 through -$size {
			$r: ($r / $ratio);
		}
	}

	// Align to Grid
	$size: 			$fontSize-base * $r;
	$lineHeight: 	ceil($size / $b) * $b;
	$shift: 		decimalRound(($lineHeight / 2) - ($size * $shiftRatio));
	$shift-offset: 	decimalRound((ceil($size / $b / $b) * $b) - $shift);

	// Output
	padding: 		$shift 0 $shift-offset;
	line-height: 	decimalRound($lineHeight);
	font-size: 		decimalRound($size);

}
